package a_1_ExtendsRelation;

/**
 * @author ze666
 * @desc 继承关系：类  超类   子类
 * @date 2021/1/18 9:01
 */
public class a_1_ExtendsRelation {

    public static void main(String[] args) {
        Student student = new Student();
        String name = student.getName();//父类的方法
    }

    /**
     * Persion  和 Student 关系
     * 1. extends表示继承，Student是Persion的子集，Student  is a Persion，是一种is-a的关系
     * 2. is-a关系是继承的一个明显特征
     * 3. 父类中存放的是通用方法和属性，将具有个性化的属性和方法放在子类中。
     */
    /**
     * 父类和子类的覆盖：
     * 1. 父类提供的通用方法不用，子类可以覆盖父类的方法
     * 2. 重写：重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！
     * 3. 方法名和参数列表称为方法的签名，子类中定义了一个与超类签名相同的方法，子类中方法会覆盖超类中相同签名方法。
     *    返回参数不是签名一部分，覆盖方法时，要保证返回类型兼容，允许覆盖方法返回类型定义为父类返回类型的子类。
     *
     * 4. 如果类声明为final，方法自动成为fianl不包括域
     */

    /**
     * 同一个类内的方法"覆盖"
     * 重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。
     */

    /**
     * 在子类中调用父类方法
     * 1. 使用super方法调用父类的方法，
     * 2. super和this不同：this是对象的引用；super是调用超类方法的特殊关键字，可以调用构造器
     */


    /**
     * 继承链、继承层次
     * 继承层次：有一个公共父类派生出所有类的集合称为继承层次
     * 继承链：一个特定类到父类的路径称为该类的继承链，继承链可以有多个
     *
     * java单继承
     *
     */

    /**
     * 继承中的多态：
     * 1. 多态：一个对象变量 可以只是多种实际类型的现象称为多态，运行时自动选择调用哪个方法的现象称为动态绑定。
     *
     * 2. 如何判断是 is-a 的继承关系
     * is-a规则也可以说成是置换法则，程序中出现父类的任何地方都可以使用子类代替。这种替换是单向的。
     * Persion per = new Persion() 可以换成：Persion per = new Student();
     *
     * 3.多态中的强制类型转换：
     * 例如：double类型转换为int类型，会舍弃小数点部分【double，int都是number类型】
     * 强制类型转换：1.只能发生在继承层次类  2.将超类转换为子类前，应该使用instanceof检查【测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型】
     */

    /**
     * 父类是抽象类或非抽象类：
     * 父类【基类】更具有通用性。
     * 抽象类：包含一个或多个抽象方法的类必须声明为抽象，同时抽象类可以包含具体数据和方法
     * 1. 抽象方法：充当占位的角色，具体实现在子类中。
     * 2. 抽象类的扩展两种方式：1. 实现部分父类的抽象方法，这个时候子类也必须是抽象的
     *                     2. 实现所有的抽象方法，子类就不是抽象的
     * 3. 抽象类：即使不含抽象方法，也可以将类声明为抽象类。
     *
     */



}
